package code.young.test;

import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.sun.javafx.iio.ios.IosDescriptor;

import code.young.bean.Car;
import code.young.bean.Person;
import code.young.bean.book;

public class IOCtest1 {
	ApplicationContext ioc = new ClassPathXmlApplicationContext("ioc.xml");
	ApplicationContext ioc2 = new ClassPathXmlApplicationContext("ioc2.xml");
//	实验2：根据bean的类型从IOC容器中获取bean的实例★
	/**
	 * org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh
		如果ioc中Person 的类型有多个，使用类型查找会报错

	 */
	@Test
	public void test02(){
//		实验2：根据bean的类型从IOC容器中获取bean的实例★
//		Person bean = ioc.getBean(Person.class);
//		System.out.println(bean);//如果ioc中Person 的类型有多个，使用类型查找会报错
//		Person bean2 = ioc.getBean("person02", Person.class);
//		System.out.println(bean2);
//		
//		Person bean = ioc.getBean("person06",Person.class);
//		System.out.println(bean );
	
	}
	/**
	 * 实验4：正确的为各种属性赋值
		    测试使用null值 、
		    引用类型赋值（引用其他bean、引用内部bean）
		    集合类型赋值（List、Map、Properties）、
		    util名称空间创建集合类型的bean
		    级联属性赋值
	 */
	@Test
	public void test03(){
		
		Person bean = ioc2.getBean("person01", Person.class);
		System.out.println(bean.getName()==null);
		System.out.println(bean.getCar());
		Car car = bean.getCar();
		Car car1 = (Car) ioc2.getBean("car01");
		System.out.println(car==car1);//bean中的car与ioc容器中的car是同一个
		
		
	}
	@Test
	public void test04(){
		Person bean = ioc2.getBean("person02",Person.class);
		Car car = bean.getCar();
		System.out.println(car);
		List<book> books = bean.getBooks();
		System.out.println(books);
		Map<String, Object> map = bean.getMap();
		System.out.println(map);
		Properties pros = bean.getPros();
		System.out.println(pros);
		
	}
	
	@Test
	public void test05(){
		Person bean = ioc2.getBean("person03",Person.class);
		Map<String, Object> map = bean.getMap();
		System.out.println(map);

	}
}
