package com.young.utils;

import java.util.Arrays;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;
/**
 * 如何将这个类（切面类）中的这些方法（通知方法）动态的在目标方法运行的各个位置切入
 * @author young
commons-logging-1.1.3.jar
spring-aop-4.0.0.RELEASE.jar
spring-beans-4.0.0.RELEASE.jar
spring-context-4.0.0.RELEASE.jar
spring-core-4.0.0.RELEASE.jar
spring-expression-4.0.0.RELEASE.jar
spring-aspects-4.0.0.RELEASE.jar:基础版

加强版的面向切面编程（即目标对象没有实现任何接口也能创建动态代理）
com.springsource.net.sf.cglib-2.2.0.jar
com.springsource.org.aopalliance-1.0.0.jar
com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar
 */
@Aspect//切面，没有切面就没有动态代理
@Component
public class LogUtils {
	/**
	 * 告诉Spring每个方法都什么时候运行
	 * @Before 在目标方法之前运行 :前置通知
	 * @After 在目标方法结束之后：后置通知
	 * @AfterReturning  在目标方法正常返回之后运行： 返回通知
	 * @AfterThrowing  在目标方法发生异常运行：异常通知
	 * @Around:环绕通知，围绕着方法执行
	 *
	 */
	/**
	 * 切入点表达式的写法：
	 * 固定格式：execution(访问权限符 返回值类型 方法全类名（参数表）)
	 * 通配符：*
	 * 1）匹配一个或多个字符（public int com.young.Impl.CalculatorImpl.*(int, int))）
	 * 2）匹配任意一个参数，第一个是int类型，另一个任意
	 * 3）只能匹配一层路径
	 * 4）权限位置的*不写，权限位置不写就行
	 * public int com.young.Impl.CalculatorImpl.*(int, *))
	 * 通配符：..
	 * public int com.young..CalculatorImpl.*(..))
	 * 1）匹配任意多个参数，任意类型参数
	 * 2）匹配任意多层路径
	 * 
	 * 最精确的：execution(public int com.young.Impl.CalculatorImpl.*(int, int))
	 * 最模糊的：execution(* *.*(..)),不能写
	 * 
	 * &&、||、!
	 * && ：execution(public int com.young.Impl.CalculatorImpl.*(int, int))&&execution(public int com.young.Impl.CalculatorImpl.*(*, *))
	 * 两者都得满足
	 * ||：满足任意一个就行
	 */
	/**
	 * 细节四：我么可以在通知方法运行的时候，拿到目标方法的详细信息
	 * 1）只需要为通知方法的参数列表上写一个参数
	 * JoinPoint joinPoint：封装了当前方法的详细信息
	 */
	//想在目标方法正常执行之前运行，写切入点表达式
	//execution(访问权限符 返回值类型 方法签名)
	@Before("execution(public int com.young.Impl.CalculatorImpl.*(int, int))")
	public static void logstart(JoinPoint joinPoint) {
		//获取到目标方法运行时使用的参数
		Object[] args = joinPoint.getArgs();
		//获取到方法签名
		Signature signature = joinPoint.getSignature();
		String name = signature.getName();
		System.out.println(name+"方法开始执行，用的参数列表为"+Arrays.asList(args));
	}
	//想在目标方法正常返回之后运行
	@AfterReturning("execution(public int com.young.Impl.CalculatorImpl.*(int, int))")
	public static void logreturn(JoinPoint joinPoint) {
		Signature signature = joinPoint.getSignature();
		String name = signature.getName();
		System.out.println(name+"方法执行完成，运行结果为");
	}
	//想在目标方法发生异常运行
	@AfterThrowing("execution(public int com.young.Impl.CalculatorImpl.*(int, int))")
	public static void logException(JoinPoint joinPoint) {
		Signature signature = joinPoint.getSignature();
		String name = signature.getName();
		System.out.println(name+"方法出现异常,异常为");
	}
	
	//想在目标方法执行结束后运行
	@After("execution(public int com.young.Impl.CalculatorImpl.*(int, int))")
	public static void logEnd(JoinPoint joinPoint) {
		Signature signature = joinPoint.getSignature();
		String name = signature.getName();
		System.out.println(name+"方法最终结束了");
	}
}
