package com.young.test;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import com.young.bean.Employee;

public class JdbcTemplateTest {
	ApplicationContext ioc = new ClassPathXmlApplicationContext(
			"applicationContext.xml");
	JdbcTemplate jdbcTemplate = ioc.getBean(JdbcTemplate.class);
	
	
	/**
	 * <!--实验1：测试数据源 -->
	 * 
	 * @throws SQLException
	 */
	@Test
	public void test01() throws SQLException {
		DataSource datasource = ioc.getBean(DataSource.class);
		Connection connection = datasource.getConnection();
		System.out.println(connection);
	}

	@Test
	public void test02() throws SQLException {
		JdbcTemplate bean = ioc.getBean(JdbcTemplate.class);
		System.out.println(bean);
	}

	/**
	 * 实验2：将emp_id=5的记录的salary字段更新为1300.00
	 * 
	 * @throws SQLException
	 */
	@Test
	public void test03() throws SQLException {
		String sql = "UPDATE employee SET salary=? WHERE emp_id=?";
		int update = jdbcTemplate.update(sql, 1300.00, 5);
		System.out.println("更新成功" + update);
	}

	/**
	 * 实验3：批量插入
	 */
	@Test
	public void test04() throws SQLException {
		String sql = "INSERT INTO employee(emp_name,salary) VALUE(?,?)";
		// List<Object> ,List的长度就是sql语句执行的长度
		List<Object[]> batchArgs = new ArrayList<>();
		batchArgs.add(new Object[] { "张三", 998 });
		batchArgs.add(new Object[] { "Tom", 1000 });
		batchArgs.add(new Object[] { "Nike", 4520 });
		int[] batchUpdate = jdbcTemplate.batchUpdate(sql, batchArgs);
		System.out.println("批量插入成功" + Arrays.toString(batchUpdate));
	}

	/**
	 * 实验4：查询emp_id=5的数据库记录，封装为一个Java对象返回 JavaBean需要和数据库中字段名一致，否则无法完成封装
	 * JdbcTemplate在方法级别进行了去区分 JdbcTemplate.query():查询集合
	 * JdbcTemplate.queryForObject():查询单个 如果查询没有会报错
	 * 实验5：查询salary>4000的数据库记录，封装为List集合返回
	 */
	@Test
	public void test05() {
		String sql = "SELECT emp_id empId,emp_name empName,salary FROM employee WHERE emp_id=?";
		Employee employee = null;
		try {
			employee = jdbcTemplate.queryForObject(sql,
					new BeanPropertyRowMapper<>(Employee.class), 5);
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println(employee);
	}

	/**
	 * 实验5：查询salary>4000的数据库记录，封装为List集合返回
	 */
	@Test
	public void test06() {
		String sql = "SELECT emp_id empId,emp_name empName,salary FROM employee WHERE salary>?";
		List<Employee> employees = jdbcTemplate.query(sql,
				new BeanPropertyRowMapper<>(Employee.class), 4000);
		System.out.println(employees);
	}

	/**
	 * 实验6：查询最大salary
	 */
	@Test
	public void test07() {
		String sql = "SELECT MAX(salary) FROM employee";
		// 无论是返回单个数据还是单个对象，都是用queryForObject
		Double object = jdbcTemplate.queryForObject(sql, Double.class);
		System.out.println(object);
	}

	/**
	 * 实验7：使用带有具名参数的SQL语句插入一条员工记录，并以Map形式传入参数值 具名参数：（具有名字的参数 ，是一个变量名）
	 * Spring有一个支持具名参数功能的jdbcTemplate 占位符参数：问号的顺序千万不能乱，传参的时候一定要注意
	 */
	@Test
	public void test08() {
		NamedParameterJdbcTemplate namejdbcJdbcTemplate = ioc.getBean(NamedParameterJdbcTemplate.class);
		String sql = "INSERT INTO employee(emp_name,salary) VALUE(:empName,:salary)";
		//Map
		Map<String, Object> paramMap=new HashMap<>();
		//将所有具名参数的值都放在map中
		paramMap.put("empName", "hahaha");
		paramMap.put("salary", 555);
		int update = namejdbcJdbcTemplate.update(sql, paramMap);
		System.out.println(update);
	}
	/**
	 * 实验8：重复实验7，以SqlParameterSource形式传入参数值
	 */
	@Test
	public void test09() {
		NamedParameterJdbcTemplate namejdbcJdbcTemplate = ioc.getBean(NamedParameterJdbcTemplate.class);
		String sql = "INSERT INTO employee(emp_name,salary) VALUE(:empName,:salary)";
		Employee employee = new Employee(45,"hello",45.3);
	}
}
