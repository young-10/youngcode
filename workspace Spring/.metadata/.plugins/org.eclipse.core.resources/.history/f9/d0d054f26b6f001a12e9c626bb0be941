package com.young.utils;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;
/**
 * 如何将这个类（切面类）中的这些方法（通知方法）动态的在目标方法运行的各个位置切入
 * @author young
commons-logging-1.1.3.jar
spring-aop-4.0.0.RELEASE.jar
spring-beans-4.0.0.RELEASE.jar
spring-context-4.0.0.RELEASE.jar
spring-core-4.0.0.RELEASE.jar
spring-expression-4.0.0.RELEASE.jar
spring-aspects-4.0.0.RELEASE.jar:基础版

加强版的面向切面编程（即目标对象没有实现任何接口也能创建动态代理）
com.springsource.net.sf.cglib-2.2.0.jar
com.springsource.org.aopalliance-1.0.0.jar
com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar
 */
@Aspect//切面，没有切面就没有动态代理
@Component
public class LogUtils {
	/*
	 * 告诉Spring每个方法都什么时候运行
	 * @Before 在目标方法之前运行 :前置通知
	 * @After 在目标方法结束之后：后置通知
	 * @AfterReturning  在目标方法正常返回之后运行： 返回通知
	 * @AfterThrowing  在目标方法发生异常运行：异常通知
	 * @Around:环绕通知，围绕着方法执行
	 *
	 */
	
	
	//想在目标方法正常执行之前运行，写切入点表达式
	//execution(访问权限符 返回值类型 方法签名)
	@Before("execution(public int com.young.Impl.CalculatorImpl.*(int, int))")
	public static void logstart() {
		System.out.println("xxx方法开始执行，用的参数列表为");
	}
	//想在目标方法正常返回之后运行
	@AfterReturning("execution(public int com.young.Impl.CalculatorImpl.*(int, int))")
	public static void logreturn() {
		System.out.println("xxx方法执行完成，运行结果为");
	}
	//想在目标方法发生异常运行
	@AfterThrowing("execution(public int com.young.Impl.CalculatorImpl.*(int, int))")
	public static void logException() {
		System.out.println("xxx方法出现异常,异常为");
	}
	
	//想在目标方法执行结束后运行
	@After("execution(public int com.young.Impl.CalculatorImpl.*(int, int))")
	public static void logEnd() {
		System.out.println("xxx方法最终结束了");
	}
}
