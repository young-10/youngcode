package com.young.utils;

import java.lang.reflect.Method;
import java.util.Arrays;

import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;
/**
 * 如何将这个类（切面类）中的这些方法（通知方法）动态的在目标方法运行的各个位置切入
 * @author young
commons-logging-1.1.3.jar
spring-aop-4.0.0.RELEASE.jar
spring-beans-4.0.0.RELEASE.jar
spring-context-4.0.0.RELEASE.jar
spring-core-4.0.0.RELEASE.jar
spring-expression-4.0.0.RELEASE.jar
spring-aspects-4.0.0.RELEASE.jar:基础版

加强版的面向切面编程（即目标对象没有实现任何接口也能创建动态代理）
com.springsource.net.sf.cglib-2.2.0.jar
com.springsource.org.aopalliance-1.0.0.jar
com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar
 */
@Aspect
@Component
public class LogUtils {
	public static void logstart() {
		System.out.println("xxx方法开始执行，用的参数列表为");
	}

	public static void logreturn() {
		System.out.println("xxx方法执行完成，运行结果为");
	}

	public static void logException() {
		System.out.println("xxx方法出现异常,异常为");
	}
	public static void logEnd() {
		System.out.println("xxx方法最终结束了");
	}
}
