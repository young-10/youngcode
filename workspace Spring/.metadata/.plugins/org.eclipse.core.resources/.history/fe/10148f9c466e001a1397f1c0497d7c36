<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!--按照配置的顺序来创建bean  -->
	<!-- 改变bean的创建顺序 -->
	<!--实验8：bean之间的依赖 -->
	<!-- <bean id="car" class="code.young.bean.Car" depends-on="book,person" ></bean> -->
	<bean id="	car" class="code.young.bean.Car"  ></bean>
	<bean id = "person" class="code.young.bean.Person"></bean>
	<bean id = "book" class="code.young.bean.book"></bean>
	<!-- 实验9：测试bean的作用域，分别创建单实例和多实例的bean 
	bean的作用域：指定bean是否是单实例，XXX，默认是单实例
	prototype:多实例的
	1）容器启动默认不会创建多实例bean
	2）获取的时候创建这个bean
	3）每次获取都会创建一个bean对象
	singleton:单实例的
	1）在容器启动完成之前就已经创建好对象，保存在容器中了
	2）任何获取都是之前创建好的那个对象
	request:同一个请求创建一个bean实例（没用）
	session:同一个会话创建一个bean实例（没用）
	-->
	<bean id = "book1" class="code.young.bean.book" scope="prototype"></bean>
	<!--bean的创建默认按照反射的方式创建出来的  -->
	<!-- 实验5：配置通过静态工厂方法创建的bean、实例工厂方法创建的bean、FactoryBean★ -->
	<!-- 工厂模式：工厂帮我们创建,有一个
		AipPlane ap = AirPlaneFactory.getPlane()
		静态工厂：工厂不需要创建对象，通过静态方法调用，对象=工厂类.工厂方法名（）
		实例工厂：工厂需要创建对象，通过对象.方法名来获取对象
	 -->
	 <!--静态工厂（不需要创建工厂本身） factory-method="getAirPlane" 指定那个方法是工厂方法  -->
	 <!-- class指定静态工厂全类名
	 factory-method指定哪个静态工厂方法 -->
	<bean id="AirPlane01" class="code.young.factory.AirPlaneStaticFactory" 
	factory-method="getAirPlane">
	<constructor-arg value="李四"></constructor-arg>
	</bean>
	<!--实例工厂使用  
		factory-bean指定使用哪个工厂实例
		factory-method使用哪个工厂方法
	-->
	<bean id="airplaneinstancefactory" class="code.young.factory.AirPlaneInstanceFactory"></bean>
	<bean id="airplane02" class="code.young.bean.AirPlane" 
		factory-bean="airplaneinstancefactory" factory-method="getAirPlane"
	><constructor-arg value="王五"></constructor-arg></bean>
	<!--FactoryBean Spring指定的一个接口，只要是实现了该接口的实现类，Spring都认为是工厂类  -->
</beans>
